/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * DCS Dropzone Registry
 * DCS Dropzone Registry API
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export type RegistryIndexItemAuthorsItem = {
  name: string;
  avatar?: string;
  url?: string;
};

export type RegistryIndexItem = {
  /** The name of the mod */
  name?: string;
  /** A short description of the mod to be displayed in the mod tile */
  description?: string;
  authors: RegistryIndexItemAuthorsItem[];
  /** The tags of the mod, these are used to filter mods in the mod browser */
  tags: string[];
  /** The category of the mod, this is used to group mods in the mod browser */
  category?: string;
  latest?: string;
  /** The dependencies of the mod */
  dependencies?: string[];
  /** @pattern ^[a-z0-9-]+$ */
  id: string;
  imageUrl: string;
};

export type RegistryIndex = RegistryIndexItem[];

export type EntryIndexAuthorsItem = {
  name: string;
  avatar?: string;
  url?: string;
};

export type EntryIndexVersionsItemAssetsItemLinksItem = {
  /** The name of the file # separates download path and internal zip path */
  source?: string;
  /** The name of the installation location relative to install path */
  target?: string;
  /** Run on simulation (mission) start, note that this will execute the script before the mission environment is sanitized */
  runonstart?: boolean;
};

export type EntryIndexVersionsItemAssetsItem = {
  /** The URL of the file to download */
  remoteSource?: string;
  links: EntryIndexVersionsItemAssetsItemLinksItem[];
};

export type EntryIndexVersionsItem = {
  /** The release page of the release */
  releasepage: string;
  /** The name of the release */
  name?: string;
  /** The version of the release */
  version?: string;
  /** The date of the release */
  date: string;
  /** Executable file specifically Tools */
  exePath?: string;
  /** The array of files to install */
  assets: EntryIndexVersionsItemAssetsItem[];
};

export interface EntryIndex {
  /** The homepage of the mod */
  homepage: string;
  /** The name of the mod */
  name?: string;
  /** A short description of the mod to be displayed in the mod tile */
  description?: string;
  authors: EntryIndexAuthorsItem[];
  /** The tags of the mod, these are used to filter mods in the mod browser */
  tags: string[];
  /** The category of the mod, this is used to group mods in the mod browser */
  category?: string;
  /** The license of the mod */
  license?: string;
  latest?: string;
  /** The dependencies of the mod */
  dependencies?: string[];
  /** The versions of the mod */
  versions: EntryIndexVersionsItem[];
  /** @pattern ^[a-z0-9-]+$ */
  id: string;
  imageUrl: string;
  content: string;
}

/**
 * @summary Get Registry Index
 */
export const getRegistryIndex = <TData = AxiosResponse<RegistryIndex>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://dcs-mod-manager-registry.pages.dev/index.json`,options
    );
  }

/**
 * @summary Get Registry Entry
 */
export const getRegistryEntry = <TData = AxiosResponse<EntryIndex>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://dcs-mod-manager-registry.pages.dev/${id}/index.json`,options
    );
  }

export type GetRegistryIndexResult = AxiosResponse<RegistryIndex>
export type GetRegistryEntryResult = AxiosResponse<EntryIndex>
